//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace POS.APP_Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class POSEntities : DbContext
    {
        public POSEntities()
            : base("name=POSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AttachGiftSystemForTransaction> AttachGiftSystemForTransactions { get; set; }
        public DbSet<Authorize> Authorizes { get; set; }
        public DbSet<Brand> Brands { get; set; }
        public DbSet<City> Cities { get; set; }
        public DbSet<ConsignmentCounter> ConsignmentCounters { get; set; }
        public DbSet<Counter> Counters { get; set; }
        public DbSet<Currency> Currencies { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<CustomerType> CustomerTypes { get; set; }
        public DbSet<DailyRecord> DailyRecords { get; set; }
        public DbSet<DeleteLog> DeleteLogs { get; set; }
        public DbSet<ExchangeRateForTransaction> ExchangeRateForTransactions { get; set; }
        public DbSet<GiftCard> GiftCards { get; set; }
        public DbSet<GiftCardInTransaction> GiftCardInTransactions { get; set; }
        public DbSet<GiftSystem> GiftSystems { get; set; }
        public DbSet<Loc_CustomerPoint> Loc_CustomerPoint { get; set; }
        public DbSet<Loc_PointRedeemHistory> Loc_PointRedeemHistory { get; set; }
        public DbSet<MainPurchase> MainPurchases { get; set; }
        public DbSet<NoveltySystem> NoveltySystems { get; set; }
        public DbSet<PaymentMethod> PaymentMethods { get; set; }
        public DbSet<PaymentType> PaymentTypes { get; set; }
        public DbSet<PointDeductionPercentage_History> PointDeductionPercentage_History { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<ProductCategory> ProductCategories { get; set; }
        public DbSet<ProductInfo> ProductInfoes { get; set; }
        public DbSet<ProductInNovelty> ProductInNovelties { get; set; }
        public DbSet<ProductPriceChange> ProductPriceChanges { get; set; }
        public DbSet<ProductSubCategory> ProductSubCategories { get; set; }
        public DbSet<PurchaseDetail> PurchaseDetails { get; set; }
        public DbSet<RoleManagement> RoleManagements { get; set; }
        public DbSet<Setting> Settings { get; set; }
        public DbSet<Shop> Shops { get; set; }
        public DbSet<SPDetail> SPDetails { get; set; }
        public DbSet<Supplier> Suppliers { get; set; }
        public DbSet<Tax> Taxes { get; set; }
        public DbSet<Transaction> Transactions { get; set; }
        public DbSet<TransactionDetail> TransactionDetails { get; set; }
        public DbSet<TransactionDetail_BK> TransactionDetail_BK { get; set; }
        public DbSet<TransactionPaymentDetail> TransactionPaymentDetails { get; set; }
        public DbSet<Unit> Units { get; set; }
        public DbSet<UsePrePaidDebt> UsePrePaidDebts { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<UserRole> UserRoles { get; set; }
        public DbSet<VIPMemberRule> VIPMemberRules { get; set; }
        public DbSet<WrapperItem> WrapperItems { get; set; }
    
        public virtual ObjectResult<AverageMonthlySaleReport_Result> AverageMonthlySaleReport(Nullable<System.DateTime> year, Nullable<long> productId)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AverageMonthlySaleReport_Result>("AverageMonthlySaleReport", yearParameter, productIdParameter);
        }
    
        public virtual ObjectResult<AverageMonthlySaleReportBrandId_Result> AverageMonthlySaleReportBrandId(Nullable<System.DateTime> year, Nullable<int> brandId)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AverageMonthlySaleReportBrandId_Result>("AverageMonthlySaleReportBrandId", yearParameter, brandIdParameter);
        }
    
        public virtual ObjectResult<AverageMonthlySaleReportByBrandIdAndCounterId_Result> AverageMonthlySaleReportByBrandIdAndCounterId(Nullable<System.DateTime> year, Nullable<int> brandId, Nullable<int> counterId)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AverageMonthlySaleReportByBrandIdAndCounterId_Result>("AverageMonthlySaleReportByBrandIdAndCounterId", yearParameter, brandIdParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<AverageMonthlySaleReportByDateTime_Result> AverageMonthlySaleReportByDateTime(Nullable<System.DateTime> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AverageMonthlySaleReportByDateTime_Result>("AverageMonthlySaleReportByDateTime", yearParameter);
        }
    
        public virtual ObjectResult<AverageMonthlySaleReportCounterId_Result> AverageMonthlySaleReportCounterId(Nullable<System.DateTime> year, Nullable<int> counterId)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AverageMonthlySaleReportCounterId_Result>("AverageMonthlySaleReportCounterId", yearParameter, counterIdParameter);
        }
    
        public virtual int ClearDBConnections()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClearDBConnections");
        }
    
        public virtual ObjectResult<string> CustomerAutoID(Nullable<System.DateTime> issueDate, string shopCode)
        {
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var shopCodeParameter = shopCode != null ?
                new ObjectParameter("ShopCode", shopCode) :
                new ObjectParameter("ShopCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CustomerAutoID", issueDateParameter, shopCodeParameter);
        }
    
        public virtual int DeleteWrapperItem(Nullable<int> id, Nullable<int> childProductId, Nullable<int> parentProductId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var childProductIdParameter = childProductId.HasValue ?
                new ObjectParameter("ChildProductId", childProductId) :
                new ObjectParameter("ChildProductId", typeof(int));
    
            var parentProductIdParameter = parentProductId.HasValue ?
                new ObjectParameter("ParentProductId", parentProductId) :
                new ObjectParameter("ParentProductId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteWrapperItem", idParameter, childProductIdParameter, parentProductIdParameter);
        }
    
        public virtual int ExportDatabase(string path, string backUpName)
        {
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var backUpNameParameter = backUpName != null ?
                new ObjectParameter("BackUpName", backUpName) :
                new ObjectParameter("BackUpName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExportDatabase", pathParameter, backUpNameParameter);
        }
    
        public virtual int Get_DamageListStockIn(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_DamageListStockIn", fromDateParameter, toDateParameter);
        }
    
        public virtual int Get_WarehouseDamagelist(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_WarehouseDamagelist", fromDateParameter, toDateParameter);
        }
    
        public virtual int GetBatchNoByExpDateOrder(Nullable<long> pId)
        {
            var pIdParameter = pId.HasValue ?
                new ObjectParameter("PId", pId) :
                new ObjectParameter("PId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBatchNoByExpDateOrder", pIdParameter);
        }
    
        public virtual int GetExpiryDatelist()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetExpiryDatelist");
        }
    
        public virtual int GetGiftCardSalesAmount(Nullable<System.DateTime> getDate, string shortCode)
        {
            var getDateParameter = getDate.HasValue ?
                new ObjectParameter("GetDate", getDate) :
                new ObjectParameter("GetDate", typeof(System.DateTime));
    
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetGiftCardSalesAmount", getDateParameter, shortCodeParameter);
        }
    
        public virtual ObjectResult<GetGWPSetQtyAndAmount_Result> GetGWPSetQtyAndAmount(Nullable<int> customerType, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> counterId)
        {
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("customerType", customerType) :
                new ObjectParameter("customerType", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGWPSetQtyAndAmount_Result>("GetGWPSetQtyAndAmount", customerTypeParameter, fromDateParameter, toDateParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<GetGWPTransactions_Result> GetGWPTransactions(Nullable<int> customerType, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> counterId)
        {
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("customerType", customerType) :
                new ObjectParameter("customerType", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGWPTransactions_Result>("GetGWPTransactions", customerTypeParameter, fromDateParameter, toDateParameter, counterIdParameter);
        }
    
        public virtual int GetImportExportHistory(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetImportExportHistory", startDateParameter, endDateParameter);
        }
    
        public virtual int GetInvoiceNoForST(string shopCode)
        {
            var shopCodeParameter = shopCode != null ?
                new ObjectParameter("ShopCode", shopCode) :
                new ObjectParameter("ShopCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetInvoiceNoForST", shopCodeParameter);
        }
    
        public virtual ObjectResult<GetNoveliesSaleByCTypte_Result> GetNoveliesSaleByCTypte(string type, Nullable<int> brandId, Nullable<System.DateTime> validFrom, Nullable<System.DateTime> validTo, Nullable<int> cityId, Nullable<int> counterId)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var validFromParameter = validFrom.HasValue ?
                new ObjectParameter("ValidFrom", validFrom) :
                new ObjectParameter("ValidFrom", typeof(System.DateTime));
    
            var validToParameter = validTo.HasValue ?
                new ObjectParameter("ValidTo", validTo) :
                new ObjectParameter("ValidTo", typeof(System.DateTime));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNoveliesSaleByCTypte_Result>("GetNoveliesSaleByCTypte", typeParameter, brandIdParameter, validFromParameter, validToParameter, cityIdParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<GetNoveliesSaleByCTypte1_Result> GetNoveliesSaleByCTypte1(string type, Nullable<int> brandId, Nullable<System.DateTime> validFrom, Nullable<System.DateTime> validTo)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var validFromParameter = validFrom.HasValue ?
                new ObjectParameter("ValidFrom", validFrom) :
                new ObjectParameter("ValidFrom", typeof(System.DateTime));
    
            var validToParameter = validTo.HasValue ?
                new ObjectParameter("ValidTo", validTo) :
                new ObjectParameter("ValidTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNoveliesSaleByCTypte1_Result>("GetNoveliesSaleByCTypte1", typeParameter, brandIdParameter, validFromParameter, validToParameter);
        }
    
        public virtual ObjectResult<GetNoveltiesSale_Result> GetNoveltiesSale()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNoveltiesSale_Result>("GetNoveltiesSale");
        }
    
        public virtual ObjectResult<GetNoveltySaleByBrandId_Result> GetNoveltySaleByBrandId(Nullable<int> brandId, Nullable<int> cityId, Nullable<int> counterId)
        {
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNoveltySaleByBrandId_Result>("GetNoveltySaleByBrandId", brandIdParameter, cityIdParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<GetNoveltySaleByBrandId_Result_Result> GetNoveltySaleByBrandId_Result(Nullable<int> brandId)
        {
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNoveltySaleByBrandId_Result_Result>("GetNoveltySaleByBrandId_Result", brandIdParameter);
        }
    
        public virtual ObjectResult<GetNoveltySaleByCType_Result_Result> GetNoveltySaleByCType_Result(string type)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNoveltySaleByCType_Result_Result>("GetNoveltySaleByCType_Result", typeParameter);
        }
    
        public virtual ObjectResult<GetNoveltySaleByDate_Result> GetNoveltySaleByDate(Nullable<int> brandId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> cityId, Nullable<int> counterId)
        {
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNoveltySaleByDate_Result>("GetNoveltySaleByDate", brandIdParameter, fromDateParameter, toDateParameter, cityIdParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<GetNoveltySaleByDate_Result_Result> GetNoveltySaleByDate_Result(Nullable<int> brandId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNoveltySaleByDate_Result_Result>("GetNoveltySaleByDate_Result", brandIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetNoveltySaleDate_Result> GetNoveltySaleDate(Nullable<int> brandId)
        {
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNoveltySaleDate_Result>("GetNoveltySaleDate", brandIdParameter);
        }
    
        public virtual ObjectResult<GetProductReport_Result> GetProductReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductReport_Result>("GetProductReport");
        }
    
        public virtual ObjectResult<GetRefundTotalAmountByProductId_Result> GetRefundTotalAmountByProductId(Nullable<System.DateTime> getDate, string shortCode, Nullable<int> salesType)
        {
            var getDateParameter = getDate.HasValue ?
                new ObjectParameter("GetDate", getDate) :
                new ObjectParameter("GetDate", typeof(System.DateTime));
    
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var salesTypeParameter = salesType.HasValue ?
                new ObjectParameter("SalesType", salesType) :
                new ObjectParameter("SalesType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRefundTotalAmountByProductId_Result>("GetRefundTotalAmountByProductId", getDateParameter, shortCodeParameter, salesTypeParameter);
        }
    
        public virtual int GetRefundTotalQtyByBatchNo(Nullable<System.DateTime> getDate, string shortCode, Nullable<int> salesType)
        {
            var getDateParameter = getDate.HasValue ?
                new ObjectParameter("GetDate", getDate) :
                new ObjectParameter("GetDate", typeof(System.DateTime));
    
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var salesTypeParameter = salesType.HasValue ?
                new ObjectParameter("SalesType", salesType) :
                new ObjectParameter("SalesType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRefundTotalQtyByBatchNo", getDateParameter, shortCodeParameter, salesTypeParameter);
        }
    
        public virtual ObjectResult<GetSaleByRange_Result> GetSaleByRange(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> year)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSaleByRange_Result>("GetSaleByRange", fromDateParameter, toDateParameter, yearParameter);
        }
    
        public virtual ObjectResult<GetSaleByRangeWithDiscountedValue_Result> GetSaleByRangeWithDiscountedValue(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string year, Nullable<int> cityId, Nullable<int> countryId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSaleByRangeWithDiscountedValue_Result>("GetSaleByRangeWithDiscountedValue", fromDateParameter, toDateParameter, yearParameter, cityIdParameter, countryIdParameter);
        }
    
        public virtual ObjectResult<GetSaleByRangeWithDiscountedValueAndSaleTrueValue_Result> GetSaleByRangeWithDiscountedValueAndSaleTrueValue(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string year)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSaleByRangeWithDiscountedValueAndSaleTrueValue_Result>("GetSaleByRangeWithDiscountedValueAndSaleTrueValue", fromDateParameter, toDateParameter, yearParameter);
        }
    
        public virtual ObjectResult<GetSaleByRangeWithSaleTrueValue_Result> GetSaleByRangeWithSaleTrueValue(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string year, Nullable<int> cityId, Nullable<int> countryId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSaleByRangeWithSaleTrueValue_Result>("GetSaleByRangeWithSaleTrueValue", fromDateParameter, toDateParameter, yearParameter, cityIdParameter, countryIdParameter);
        }
    
        public virtual ObjectResult<GetSaleBySegmentWithDiscountedValue_Result> GetSaleBySegmentWithDiscountedValue(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string year, Nullable<int> cityId, Nullable<int> countryId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSaleBySegmentWithDiscountedValue_Result>("GetSaleBySegmentWithDiscountedValue", fromDateParameter, toDateParameter, yearParameter, cityIdParameter, countryIdParameter);
        }
    
        public virtual ObjectResult<GetSaleBySegmentWithSaleTrueValue_Result> GetSaleBySegmentWithSaleTrueValue(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string year, Nullable<int> cityId, Nullable<int> countryId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSaleBySegmentWithSaleTrueValue_Result>("GetSaleBySegmentWithSaleTrueValue", fromDateParameter, toDateParameter, yearParameter, cityIdParameter, countryIdParameter);
        }
    
        public virtual ObjectResult<GetSaleBySubSegmentWithDiscountedValue_Result> GetSaleBySubSegmentWithDiscountedValue(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string year, Nullable<int> cityId, Nullable<int> countryId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSaleBySubSegmentWithDiscountedValue_Result>("GetSaleBySubSegmentWithDiscountedValue", fromDateParameter, toDateParameter, yearParameter, cityIdParameter, countryIdParameter);
        }
    
        public virtual ObjectResult<GetSaleBySubSegmentWithSaleTrueValue_Result> GetSaleBySubSegmentWithSaleTrueValue(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string year)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSaleBySubSegmentWithSaleTrueValue_Result>("GetSaleBySubSegmentWithSaleTrueValue", fromDateParameter, toDateParameter, yearParameter);
        }
    
        public virtual ObjectResult<GetSaleSpecialPromotionByCustomerId_Result> GetSaleSpecialPromotionByCustomerId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> cusType, Nullable<int> bId, Nullable<bool> isSaleTruePrice, Nullable<int> cityId, Nullable<int> counterId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var cusTypeParameter = cusType.HasValue ?
                new ObjectParameter("cusType", cusType) :
                new ObjectParameter("cusType", typeof(int));
    
            var bIdParameter = bId.HasValue ?
                new ObjectParameter("bId", bId) :
                new ObjectParameter("bId", typeof(int));
    
            var isSaleTruePriceParameter = isSaleTruePrice.HasValue ?
                new ObjectParameter("IsSaleTruePrice", isSaleTruePrice) :
                new ObjectParameter("IsSaleTruePrice", typeof(bool));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSaleSpecialPromotionByCustomerId_Result>("GetSaleSpecialPromotionByCustomerId", fromDateParameter, toDateParameter, cusTypeParameter, bIdParameter, isSaleTruePriceParameter, cityIdParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<GetSaleSpecialPromotionSegmentByCustomerId_Result> GetSaleSpecialPromotionSegmentByCustomerId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> cusType, Nullable<int> bId, Nullable<bool> isSaleTruePrice, Nullable<int> cityId, Nullable<int> counterId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var cusTypeParameter = cusType.HasValue ?
                new ObjectParameter("cusType", cusType) :
                new ObjectParameter("cusType", typeof(int));
    
            var bIdParameter = bId.HasValue ?
                new ObjectParameter("bId", bId) :
                new ObjectParameter("bId", typeof(int));
    
            var isSaleTruePriceParameter = isSaleTruePrice.HasValue ?
                new ObjectParameter("IsSaleTruePrice", isSaleTruePrice) :
                new ObjectParameter("IsSaleTruePrice", typeof(bool));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSaleSpecialPromotionSegmentByCustomerId_Result>("GetSaleSpecialPromotionSegmentByCustomerId", fromDateParameter, toDateParameter, cusTypeParameter, bIdParameter, isSaleTruePriceParameter, cityIdParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<GetSaleSpecialPromotionSubSegmentByCustomerId_Result> GetSaleSpecialPromotionSubSegmentByCustomerId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> cusType, Nullable<int> bId, Nullable<bool> isSaleTruePrice, Nullable<int> cityId, Nullable<int> countryId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var cusTypeParameter = cusType.HasValue ?
                new ObjectParameter("cusType", cusType) :
                new ObjectParameter("cusType", typeof(int));
    
            var bIdParameter = bId.HasValue ?
                new ObjectParameter("bId", bId) :
                new ObjectParameter("bId", typeof(int));
    
            var isSaleTruePriceParameter = isSaleTruePrice.HasValue ?
                new ObjectParameter("IsSaleTruePrice", isSaleTruePrice) :
                new ObjectParameter("IsSaleTruePrice", typeof(bool));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSaleSpecialPromotionSubSegmentByCustomerId_Result>("GetSaleSpecialPromotionSubSegmentByCustomerId", fromDateParameter, toDateParameter, cusTypeParameter, bIdParameter, isSaleTruePriceParameter, cityIdParameter, countryIdParameter);
        }
    
        public virtual int GetStockInByDate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetStockInByDate", startDateParameter, endDateParameter);
        }
    
        public virtual int GetStockInByExpireDate(Nullable<System.DateTime> expDate)
        {
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("expDate", expDate) :
                new ObjectParameter("expDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetStockInByExpireDate", expDateParameter);
        }
    
        public virtual int GetStockInByProductCode(string pCode)
        {
            var pCodeParameter = pCode != null ?
                new ObjectParameter("pCode", pCode) :
                new ObjectParameter("pCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetStockInByProductCode", pCodeParameter);
        }
    
        public virtual int GetStockInByProductName(string pName)
        {
            var pNameParameter = pName != null ?
                new ObjectParameter("pName", pName) :
                new ObjectParameter("pName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetStockInByProductName", pNameParameter);
        }
    
        public virtual int GetStockInSAPById(Nullable<long> pId)
        {
            var pIdParameter = pId.HasValue ?
                new ObjectParameter("PId", pId) :
                new ObjectParameter("PId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetStockInSAPById", pIdParameter);
        }
    
        public virtual int GetStockOutTransaction(Nullable<long> pId, string batchNo)
        {
            var pIdParameter = pId.HasValue ?
                new ObjectParameter("PId", pId) :
                new ObjectParameter("PId", typeof(long));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("batchNo", batchNo) :
                new ObjectParameter("batchNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetStockOutTransaction", pIdParameter, batchNoParameter);
        }
    
        public virtual int GetTotalAmountByPaymentTypeId(Nullable<System.DateTime> getDate, string shortCode)
        {
            var getDateParameter = getDate.HasValue ?
                new ObjectParameter("GetDate", getDate) :
                new ObjectParameter("GetDate", typeof(System.DateTime));
    
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTotalAmountByPaymentTypeId", getDateParameter, shortCodeParameter);
        }
    
        public virtual ObjectResult<GetTotalAmountByProductId_Result> GetTotalAmountByProductId(Nullable<System.DateTime> getDate, string shortCode, Nullable<int> salesType)
        {
            var getDateParameter = getDate.HasValue ?
                new ObjectParameter("GetDate", getDate) :
                new ObjectParameter("GetDate", typeof(System.DateTime));
    
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var salesTypeParameter = salesType.HasValue ?
                new ObjectParameter("SalesType", salesType) :
                new ObjectParameter("SalesType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTotalAmountByProductId_Result>("GetTotalAmountByProductId", getDateParameter, shortCodeParameter, salesTypeParameter);
        }
    
        public virtual int GetTotalQtyByBatchNo(Nullable<System.DateTime> getDate, string shortCode, Nullable<int> salesType)
        {
            var getDateParameter = getDate.HasValue ?
                new ObjectParameter("GetDate", getDate) :
                new ObjectParameter("GetDate", typeof(System.DateTime));
    
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var salesTypeParameter = salesType.HasValue ?
                new ObjectParameter("SalesType", salesType) :
                new ObjectParameter("SalesType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTotalQtyByBatchNo", getDateParameter, shortCodeParameter, salesTypeParameter);
        }
    
        public virtual int GetUnExportedTransactionDate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string shortCode)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUnExportedTransactionDate", startDateParameter, endDateParameter, shortCodeParameter);
        }
    
        public virtual ObjectResult<string> InsertDraft(Nullable<System.DateTime> dateTime, Nullable<int> userId, Nullable<int> counterId, string type, Nullable<bool> isPaid, Nullable<bool> isActive, Nullable<int> paymentTypeId, Nullable<int> taxAmount, Nullable<int> discountAmount, Nullable<decimal> totalAmount, Nullable<decimal> recieveAmount, Nullable<int> giftCardId, Nullable<int> customerId, string shopCode, Nullable<int> shopId)
        {
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var paymentTypeIdParameter = paymentTypeId.HasValue ?
                new ObjectParameter("PaymentTypeId", paymentTypeId) :
                new ObjectParameter("PaymentTypeId", typeof(int));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(int));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var recieveAmountParameter = recieveAmount.HasValue ?
                new ObjectParameter("RecieveAmount", recieveAmount) :
                new ObjectParameter("RecieveAmount", typeof(decimal));
    
            var giftCardIdParameter = giftCardId.HasValue ?
                new ObjectParameter("GiftCardId", giftCardId) :
                new ObjectParameter("GiftCardId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var shopCodeParameter = shopCode != null ?
                new ObjectParameter("ShopCode", shopCode) :
                new ObjectParameter("ShopCode", typeof(string));
    
            var shopIdParameter = shopId.HasValue ?
                new ObjectParameter("ShopId", shopId) :
                new ObjectParameter("ShopId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertDraft", dateTimeParameter, userIdParameter, counterIdParameter, typeParameter, isPaidParameter, isActiveParameter, paymentTypeIdParameter, taxAmountParameter, discountAmountParameter, totalAmountParameter, recieveAmountParameter, giftCardIdParameter, customerIdParameter, shopCodeParameter, shopIdParameter);
        }
    
        public virtual int InsertImportExportLog(Nullable<System.DateTime> processingDateTime, string type, string status, string shortCode)
        {
            var processingDateTimeParameter = processingDateTime.HasValue ?
                new ObjectParameter("ProcessingDateTime", processingDateTime) :
                new ObjectParameter("ProcessingDateTime", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertImportExportLog", processingDateTimeParameter, typeParameter, statusParameter, shortCodeParameter);
        }
    
        public virtual int InsertImportExportLogDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertImportExportLogDetail");
        }
    
        public virtual ObjectResult<string> InsertRefundTransaction(Nullable<System.DateTime> dateTime, Nullable<int> userId, Nullable<int> counterId, string type, Nullable<bool> isPaid, Nullable<bool> isActive, Nullable<int> paymentTypeId, Nullable<int> taxAmount, Nullable<int> discountAmount, Nullable<decimal> totalAmount, Nullable<decimal> recieveAmount, string parentId, Nullable<int> giftCardId, Nullable<int> customerId, string shopCode, Nullable<int> shopId)
        {
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var paymentTypeIdParameter = paymentTypeId.HasValue ?
                new ObjectParameter("PaymentTypeId", paymentTypeId) :
                new ObjectParameter("PaymentTypeId", typeof(int));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(int));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var recieveAmountParameter = recieveAmount.HasValue ?
                new ObjectParameter("RecieveAmount", recieveAmount) :
                new ObjectParameter("RecieveAmount", typeof(decimal));
    
            var parentIdParameter = parentId != null ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(string));
    
            var giftCardIdParameter = giftCardId.HasValue ?
                new ObjectParameter("GiftCardId", giftCardId) :
                new ObjectParameter("GiftCardId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var shopCodeParameter = shopCode != null ?
                new ObjectParameter("ShopCode", shopCode) :
                new ObjectParameter("ShopCode", typeof(string));
    
            var shopIdParameter = shopId.HasValue ?
                new ObjectParameter("ShopId", shopId) :
                new ObjectParameter("ShopId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertRefundTransaction", dateTimeParameter, userIdParameter, counterIdParameter, typeParameter, isPaidParameter, isActiveParameter, paymentTypeIdParameter, taxAmountParameter, discountAmountParameter, totalAmountParameter, recieveAmountParameter, parentIdParameter, giftCardIdParameter, customerIdParameter, shopCodeParameter, shopIdParameter);
        }
    
        public virtual int insertSPDetail(Nullable<long> transactionDetailID, Nullable<long> parentProductID, Nullable<long> childProductID, Nullable<long> price, Nullable<decimal> discountRate, string shopCode)
        {
            var transactionDetailIDParameter = transactionDetailID.HasValue ?
                new ObjectParameter("TransactionDetailID", transactionDetailID) :
                new ObjectParameter("TransactionDetailID", typeof(long));
    
            var parentProductIDParameter = parentProductID.HasValue ?
                new ObjectParameter("ParentProductID", parentProductID) :
                new ObjectParameter("ParentProductID", typeof(long));
    
            var childProductIDParameter = childProductID.HasValue ?
                new ObjectParameter("ChildProductID", childProductID) :
                new ObjectParameter("ChildProductID", typeof(long));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(long));
    
            var discountRateParameter = discountRate.HasValue ?
                new ObjectParameter("DiscountRate", discountRate) :
                new ObjectParameter("DiscountRate", typeof(decimal));
    
            var shopCodeParameter = shopCode != null ?
                new ObjectParameter("ShopCode", shopCode) :
                new ObjectParameter("ShopCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertSPDetail", transactionDetailIDParameter, parentProductIDParameter, childProductIDParameter, priceParameter, discountRateParameter, shopCodeParameter);
        }
    
        public virtual int InsertStockTransfer(Nullable<System.DateTime> dateTime, Nullable<bool> isFOC, Nullable<int> shopId, Nullable<int> wareHouseId, Nullable<System.DateTime> transferDate, Nullable<int> userId, string status, string remark)
        {
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var isFOCParameter = isFOC.HasValue ?
                new ObjectParameter("IsFOC", isFOC) :
                new ObjectParameter("IsFOC", typeof(bool));
    
            var shopIdParameter = shopId.HasValue ?
                new ObjectParameter("ShopId", shopId) :
                new ObjectParameter("ShopId", typeof(int));
    
            var wareHouseIdParameter = wareHouseId.HasValue ?
                new ObjectParameter("WareHouseId", wareHouseId) :
                new ObjectParameter("WareHouseId", typeof(int));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStockTransfer", dateTimeParameter, isFOCParameter, shopIdParameter, wareHouseIdParameter, transferDateParameter, userIdParameter, statusParameter, remarkParameter);
        }
    
        public virtual ObjectResult<string> InsertTransaction(Nullable<System.DateTime> dateTime, Nullable<int> userId, Nullable<int> counterId, string type, Nullable<bool> isPaid, Nullable<bool> isActive, Nullable<int> paymentTypeId, Nullable<int> taxAmount, Nullable<int> discountAmount, Nullable<decimal> totalAmount, Nullable<decimal> recieveAmount, Nullable<int> giftCardId, Nullable<int> customerId, string shopCode, Nullable<int> shopId)
        {
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var paymentTypeIdParameter = paymentTypeId.HasValue ?
                new ObjectParameter("PaymentTypeId", paymentTypeId) :
                new ObjectParameter("PaymentTypeId", typeof(int));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(int));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var recieveAmountParameter = recieveAmount.HasValue ?
                new ObjectParameter("RecieveAmount", recieveAmount) :
                new ObjectParameter("RecieveAmount", typeof(decimal));
    
            var giftCardIdParameter = giftCardId.HasValue ?
                new ObjectParameter("GiftCardId", giftCardId) :
                new ObjectParameter("GiftCardId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var shopCodeParameter = shopCode != null ?
                new ObjectParameter("ShopCode", shopCode) :
                new ObjectParameter("ShopCode", typeof(string));
    
            var shopIdParameter = shopId.HasValue ?
                new ObjectParameter("ShopId", shopId) :
                new ObjectParameter("ShopId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertTransaction", dateTimeParameter, userIdParameter, counterIdParameter, typeParameter, isPaidParameter, isActiveParameter, paymentTypeIdParameter, taxAmountParameter, discountAmountParameter, totalAmountParameter, recieveAmountParameter, giftCardIdParameter, customerIdParameter, shopCodeParameter, shopIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertTransactionDetail(string transactionId, Nullable<int> productId, Nullable<int> qty, Nullable<int> unitPrice, Nullable<double> discountRate, Nullable<double> taxRate, Nullable<int> totalAmount, Nullable<bool> isDeleted, Nullable<double> isDeductedBy, Nullable<bool> bdDiscounted)
        {
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(int));
    
            var discountRateParameter = discountRate.HasValue ?
                new ObjectParameter("DiscountRate", discountRate) :
                new ObjectParameter("DiscountRate", typeof(double));
    
            var taxRateParameter = taxRate.HasValue ?
                new ObjectParameter("TaxRate", taxRate) :
                new ObjectParameter("TaxRate", typeof(double));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isDeductedByParameter = isDeductedBy.HasValue ?
                new ObjectParameter("IsDeductedBy", isDeductedBy) :
                new ObjectParameter("IsDeductedBy", typeof(double));
    
            var bdDiscountedParameter = bdDiscounted.HasValue ?
                new ObjectParameter("BdDiscounted", bdDiscounted) :
                new ObjectParameter("BdDiscounted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertTransactionDetail", transactionIdParameter, productIdParameter, qtyParameter, unitPriceParameter, discountRateParameter, taxRateParameter, totalAmountParameter, isDeletedParameter, isDeductedByParameter, bdDiscountedParameter);
        }
    
        public virtual int Paid(Nullable<bool> paid, string id)
        {
            var paidParameter = paid.HasValue ?
                new ObjectParameter("paid", paid) :
                new ObjectParameter("paid", typeof(bool));
    
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Paid", paidParameter, idParameter);
        }
    
        public virtual ObjectResult<ProductReportByBId_Result> ProductReportByBId(Nullable<int> brandId)
        {
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductReportByBId_Result>("ProductReportByBId", brandIdParameter);
        }
    
        public virtual ObjectResult<ProductReportByCId_Result> ProductReportByCId(Nullable<int> mainCategoryId)
        {
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductReportByCId_Result>("ProductReportByCId", mainCategoryIdParameter);
        }
    
        public virtual ObjectResult<ProductReportByCIdAndBId_Result> ProductReportByCIdAndBId(Nullable<int> brandId, Nullable<int> mainCategoryId)
        {
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductReportByCIdAndBId_Result>("ProductReportByCIdAndBId", brandIdParameter, mainCategoryIdParameter);
        }
    
        public virtual ObjectResult<ProductReportBySCIdAndCId_Result> ProductReportBySCIdAndCId(Nullable<int> mainCategoryId, Nullable<int> subCategoryId)
        {
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductReportBySCIdAndCId_Result>("ProductReportBySCIdAndCId", mainCategoryIdParameter, subCategoryIdParameter);
        }
    
        public virtual ObjectResult<ProductReportBySCIdAndCIdAndBId_Result> ProductReportBySCIdAndCIdAndBId(Nullable<int> mainCategoryId, Nullable<int> subCategoryId, Nullable<int> brandId)
        {
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductReportBySCIdAndCIdAndBId_Result>("ProductReportBySCIdAndCIdAndBId", mainCategoryIdParameter, subCategoryIdParameter, brandIdParameter);
        }
    
        public virtual ObjectResult<RefundItemList_Result> RefundItemList(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RefundItemList_Result>("RefundItemList", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SaleBreakDownByRangeWithSaleTrueValue_Result> SaleBreakDownByRangeWithSaleTrueValue(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> cusType, Nullable<bool> isSp, Nullable<int> cityId, Nullable<int> counterId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var cusTypeParameter = cusType.HasValue ?
                new ObjectParameter("cusType", cusType) :
                new ObjectParameter("cusType", typeof(int));
    
            var isSpParameter = isSp.HasValue ?
                new ObjectParameter("isSp", isSp) :
                new ObjectParameter("isSp", typeof(bool));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaleBreakDownByRangeWithSaleTrueValue_Result>("SaleBreakDownByRangeWithSaleTrueValue", fromDateParameter, toDateParameter, cusTypeParameter, isSpParameter, cityIdParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<SaleBreakDownByRangeWithUnitValue_Result> SaleBreakDownByRangeWithUnitValue(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> cusType, Nullable<bool> isSp, Nullable<int> cityId, Nullable<int> counterId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var cusTypeParameter = cusType.HasValue ?
                new ObjectParameter("cusType", cusType) :
                new ObjectParameter("cusType", typeof(int));
    
            var isSpParameter = isSp.HasValue ?
                new ObjectParameter("isSp", isSp) :
                new ObjectParameter("isSp", typeof(bool));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaleBreakDownByRangeWithUnitValue_Result>("SaleBreakDownByRangeWithUnitValue", fromDateParameter, toDateParameter, cusTypeParameter, isSpParameter, cityIdParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<SaleBreakDownBySegmentWithSaleTrueValue_Result> SaleBreakDownBySegmentWithSaleTrueValue(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> cusType, Nullable<bool> isSp, Nullable<int> cityId, Nullable<int> counterId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var cusTypeParameter = cusType.HasValue ?
                new ObjectParameter("cusType", cusType) :
                new ObjectParameter("cusType", typeof(int));
    
            var isSpParameter = isSp.HasValue ?
                new ObjectParameter("isSp", isSp) :
                new ObjectParameter("isSp", typeof(bool));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaleBreakDownBySegmentWithSaleTrueValue_Result>("SaleBreakDownBySegmentWithSaleTrueValue", fromDateParameter, toDateParameter, cusTypeParameter, isSpParameter, cityIdParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<SaleBreakDownBySegmentWithUnitValue_Result> SaleBreakDownBySegmentWithUnitValue(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> cusType, Nullable<bool> isSp, Nullable<int> cityId, Nullable<int> counterId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var cusTypeParameter = cusType.HasValue ?
                new ObjectParameter("cusType", cusType) :
                new ObjectParameter("cusType", typeof(int));
    
            var isSpParameter = isSp.HasValue ?
                new ObjectParameter("isSp", isSp) :
                new ObjectParameter("isSp", typeof(bool));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaleBreakDownBySegmentWithUnitValue_Result>("SaleBreakDownBySegmentWithUnitValue", fromDateParameter, toDateParameter, cusTypeParameter, isSpParameter, cityIdParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<SaleItemListByDate_Result> SaleItemListByDate(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaleItemListByDate_Result>("SaleItemListByDate", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SelectItemListByDate_Result> SelectItemListByDate(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> counterId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectItemListByDate_Result>("SelectItemListByDate", fromDateParameter, toDateParameter, isSaleParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<SelectTaxesListByDate_Result> SelectTaxesListByDate(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectTaxesListByDate_Result>("SelectTaxesListByDate", fromDateParameter, toDateParameter, isSaleParameter);
        }
    
        public virtual ObjectResult<Top100SaleItemList_Result> Top100SaleItemList(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isAmount, Nullable<int> num, Nullable<int> cityId, Nullable<int> counterId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isAmountParameter = isAmount.HasValue ?
                new ObjectParameter("IsAmount", isAmount) :
                new ObjectParameter("IsAmount", typeof(bool));
    
            var numParameter = num.HasValue ?
                new ObjectParameter("num", num) :
                new ObjectParameter("num", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Top100SaleItemList_Result>("Top100SaleItemList", fromDateParameter, toDateParameter, isAmountParameter, numParameter, cityIdParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<TransactionDetailByItem_Result> TransactionDetailByItem(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> mainCategoryId, Nullable<int> subCategoryId, Nullable<int> brandId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionDetailByItem_Result>("TransactionDetailByItem", fromDateParameter, toDateParameter, isSaleParameter, mainCategoryIdParameter, subCategoryIdParameter, brandIdParameter);
        }
    
        public virtual ObjectResult<TransactionDetailReport_Result> TransactionDetailReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> cityId, Nullable<int> counterId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionDetailReport_Result>("TransactionDetailReport", fromDateParameter, toDateParameter, isSaleParameter, cityIdParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<TransactionDetailReportByBId_Result> TransactionDetailReportByBId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> brandId, Nullable<int> cityId, Nullable<int> counterId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionDetailReportByBId_Result>("TransactionDetailReportByBId", fromDateParameter, toDateParameter, isSaleParameter, brandIdParameter, cityIdParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<TransactionDetailReportByBIdAndCId_Result> TransactionDetailReportByBIdAndCId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> brandId, Nullable<int> mainCategoryId, Nullable<int> cityId, Nullable<int> counterId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionDetailReportByBIdAndCId_Result>("TransactionDetailReportByBIdAndCId", fromDateParameter, toDateParameter, isSaleParameter, brandIdParameter, mainCategoryIdParameter, cityIdParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<TransactionDetailReportByBIdAndCIdAndSCId_Result> TransactionDetailReportByBIdAndCIdAndSCId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> brandId, Nullable<int> mainCategoryId, Nullable<int> subCategoryId, Nullable<int> cityId, Nullable<int> counterId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionDetailReportByBIdAndCIdAndSCId_Result>("TransactionDetailReportByBIdAndCIdAndSCId", fromDateParameter, toDateParameter, isSaleParameter, brandIdParameter, mainCategoryIdParameter, subCategoryIdParameter, cityIdParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<TransactionDetailReportByCId_Result> TransactionDetailReportByCId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> mainCategoryId, Nullable<int> cityId, Nullable<int> counterId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionDetailReportByCId_Result>("TransactionDetailReportByCId", fromDateParameter, toDateParameter, isSaleParameter, mainCategoryIdParameter, cityIdParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<TransactionDetailReportBySCIdAndCId_Result> TransactionDetailReportBySCIdAndCId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> subCategoryId, Nullable<int> mainCategoryId, Nullable<int> cityId, Nullable<int> counterId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionDetailReportBySCIdAndCId_Result>("TransactionDetailReportBySCIdAndCId", fromDateParameter, toDateParameter, isSaleParameter, subCategoryIdParameter, mainCategoryIdParameter, cityIdParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<VIPReportForNoveltyAndGWP_Result> VIPReportForNoveltyAndGWP(Nullable<int> customerType, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> counterId, Nullable<int> cityId)
        {
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("customerType", customerType) :
                new ObjectParameter("customerType", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VIPReportForNoveltyAndGWP_Result>("VIPReportForNoveltyAndGWP", customerTypeParameter, fromDateParameter, toDateParameter, counterIdParameter, cityIdParameter);
        }
    }
}
